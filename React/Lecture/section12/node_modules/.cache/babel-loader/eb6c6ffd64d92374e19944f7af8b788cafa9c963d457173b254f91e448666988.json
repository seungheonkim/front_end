{"ast":null,"code":"var _jsxFileName = \"/Users/gimseungheon/Documents/front_project/React/Lecture/section12/src/components/UI/Button/Button.js\";\nimport React from 'react';\nimport classes from './Button.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Button = props => {\n  console.log('Button RUNNING!');\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    type: props.type || 'button',\n    className: `${classes.button} ${props.className}`,\n    onClick: props.onClick,\n    disabled: props.disabled,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, this);\n};\n_c = Button;\nexport default _c2 = /*#__PURE__*/React.memo(Button);\n//memo() 처리했는데 왜 계속 리렌더링 될까?\n//App.js 에 존재하는 토글핸들러가 일반 함수이기 때문에\n//App.js 가 렌더링이 되면 해당 토글핸들러 함수도 리렌더링이 되게\n//따라서 Button 컴포넌트의 props 도 계속 새로운 함수가 전달되기 때문에(새로운 주소값을 가진)\n//memo()가 먹히지 않는것임!! => 새로운 props가 전달되었기 때문\n//따라서 함수와 같은 참조값은 생성될 때마다 새로운 주소값을 하당받기 때문에 memo()로는 리렌더링 방지 불가능\nvar _c, _c2;\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","classes","Button","props","console","log","type","button","className","onClick","disabled","children","memo"],"sources":["/Users/gimseungheon/Documents/front_project/React/Lecture/section12/src/components/UI/Button/Button.js"],"sourcesContent":["import React from 'react';\n\nimport classes from './Button.module.css';\n\nconst Button = (props) => {\n    console.log('Button RUNNING!');\n    return (\n        <button\n            type={props.type || 'button'}\n            className={`${classes.button} ${props.className}`}\n            onClick={props.onClick}\n            disabled={props.disabled}\n        >\n            {props.children}\n        </button>\n    );\n};\n\nexport default React.memo(Button);\n//memo() 처리했는데 왜 계속 리렌더링 될까?\n//App.js 에 존재하는 토글핸들러가 일반 함수이기 때문에\n//App.js 가 렌더링이 되면 해당 토글핸들러 함수도 리렌더링이 되게\n//따라서 Button 컴포넌트의 props 도 계속 새로운 함수가 전달되기 때문에(새로운 주소값을 가진)\n//memo()가 먹히지 않는것임!! => 새로운 props가 전달되었기 때문\n//따라서 함수와 같은 참조값은 생성될 때마다 새로운 주소값을 하당받기 때문에 memo()로는 리렌더링 방지 불가능"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAOC,OAAO,MAAM,qBAAqB;AAAC;AAE1C,MAAMC,MAAM,GAAIC,KAAK,IAAK;EACtBC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;EAC9B,oBACI;IACI,IAAI,EAAEF,KAAK,CAACG,IAAI,IAAI,QAAS;IAC7B,SAAS,EAAG,GAAEL,OAAO,CAACM,MAAO,IAAGJ,KAAK,CAACK,SAAU,EAAE;IAClD,OAAO,EAAEL,KAAK,CAACM,OAAQ;IACvB,QAAQ,EAAEN,KAAK,CAACO,QAAS;IAAA,UAExBP,KAAK,CAACQ;EAAQ;IAAA;IAAA;IAAA;EAAA,QACV;AAEjB,CAAC;AAAC,KAZIT,MAAM;AAcZ,kCAAeF,KAAK,CAACY,IAAI,CAACV,MAAM,CAAC;AACjC;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}