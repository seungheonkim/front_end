{"version":3,"file":"react-router-prompt.esm.js","sources":["../src/hooks/use-blocker.ts","../src/ConfirmContext.tsx","../src/hooks/use-confirm.ts","../src/index.tsx"],"sourcesContent":["import { useContext, useEffect } from \"react\";\nimport { Blocker, Transition } from \"history\";\n// @ts-ignore\nimport { UNSAFE_NavigationContext as NavigationContext } from \"react-router-dom\";\n\nfunction useBlocker(blocker: Blocker, when = true) {\n  const { navigator } = useContext(NavigationContext);\n\n  useEffect(() => {\n    if (!when) return;\n\n    // @ts-ignore\n    const unblock = navigator.block((tx: Transition) => {\n      const autoUnblockingTx = {\n        ...tx,\n        retry() {\n          // Automatically unblock the transition so it can play all the way\n          // through before retrying it. TODO: Figure out how to re-enable\n          // this block if the transition is cancelled for some reason.\n          unblock();\n          tx.retry();\n        },\n      };\n\n      blocker(autoUnblockingTx);\n    });\n\n    return unblock;\n  }, [navigator, blocker, when]);\n}\n\nexport default useBlocker;\n","import React, { useState } from \"react\";\n\ninterface ContextProviderType {\n  resolve?: boolean;\n  setResolve?: (value: boolean) => void;\n}\n\nexport const ConfirmContext = React.createContext<ContextProviderType | null>(\n  null\n);\n\nconst ConfirmContextProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  const [resolve, setResolve] = useState(false);\n\n  return (\n    <ConfirmContext.Provider\n      value={{\n        resolve,\n        setResolve,\n      }}\n    >\n      {children}\n    </ConfirmContext.Provider>\n  );\n};\n\nexport default ConfirmContextProvider;\n","import { useState, useEffect, useCallback, useContext } from \"react\";\nimport { ConfirmContext } from \"../ConfirmContext\";\nimport { Transition } from \"history\";\nimport { ReactRouterPromptProps } from \"..\";\n\nconst noop = () => {\n  /*No Operation*/\n};\n\nconst initialConfirmState = {\n  isActive: false,\n  proceed: noop,\n  cancel: noop,\n};\n\ndeclare interface InitialStateType {\n  isActive: boolean;\n  proceed: (value: unknown) => void;\n  cancel: (value: unknown) => void;\n}\n\ndeclare interface ConfirmLeaveReturnType extends InitialStateType {\n  onConfirm: (tx: Transition) => Promise<boolean>;\n  resetConfirmation: () => void;\n}\n\nconst useConfirm = (\n  when: ReactRouterPromptProps[\"when\"]\n): ConfirmLeaveReturnType => {\n  const [confirm, setConfirm] = useState<InitialStateType>(initialConfirmState);\n  const { setResolve } = useContext(ConfirmContext) || {};\n\n  useEffect(() => {\n    if (confirm.isActive) {\n      window.onbeforeunload = (): boolean => {\n        return false;\n      };\n    }\n\n    return (): void => {\n      if (confirm.isActive) window.onbeforeunload = null;\n    };\n  }, [confirm]);\n\n  const resetConfirmation = useCallback(() => {\n    setConfirm(initialConfirmState);\n  }, []);\n\n  const onConfirm = useCallback(\n    async (tx: Transition): Promise<boolean> => {\n      const promise = new Promise(async (resolve, reject) => {\n        setConfirm((prevState: InitialStateType) => ({\n          ...prevState,\n          isActive: true,\n          proceed: resolve,\n          cancel: reject,\n        }));\n\n        // Go ahead and resolve the promise when the `when` function\n        // returns `false`, which means the prompt should not be displayed\n        // and navigation should occur.\n        if (typeof when === \"function\") {\n          const shouldPrompt = await when(tx.location, tx.action);\n          if (!shouldPrompt) {\n            resolve(true);\n          }\n        }\n      });\n\n      return promise.then(\n        () => {\n          setResolve?.(true);\n          setConfirm({ ...confirm, isActive: false });\n          return true;\n        },\n        () => {\n          setConfirm({ ...confirm, isActive: false });\n          setResolve?.(false);\n          return false;\n        }\n      );\n    },\n    [confirm, setResolve, when]\n  );\n\n  return {\n    ...confirm,\n    onConfirm,\n    resetConfirmation,\n  };\n};\n\nexport default useConfirm;\n","import React, { useCallback, useContext } from \"react\";\nimport { Action, Location, Transition } from \"history\";\n\nimport useBlocker from \"./hooks/use-blocker\";\nimport ConfirmContextProvider, { ConfirmContext } from \"./ConfirmContext\";\nimport useConfirm from \"./hooks/use-confirm\";\n\nexport type ReactRouterPromptProps = {\n  when: boolean | ((nextLocation: Location, _action: Action) => boolean);\n  children: (data: {\n    isActive: boolean;\n    onCancel: (value: unknown) => void;\n    onConfirm: (value: unknown) => void;\n  }) => React.ReactNode;\n};\n\n/**\n * A replacement component for the react-router `Prompt`.\n * Allows for more flexible dialogs.\n *\n * @example\n * <ReactRouterPrompt when={isDirty}>\n *   {({isActive, onConfirm, onCancel}) => (\n *     <Modal show={isActive}>\n *       <div>\n *         <p>Do you really want to leave?</p>\n *         <button onClick={onCancel}>Cancel</button>\n *         <button onClick={onConfirm}>Ok</button>\n *       </div>\n *     </Modal>\n *   )}\n * </ReactRouterPrompt>\n */\n\nconst ReactRouterPrompt: React.FC<ReactRouterPromptProps> = ({\n  when,\n  children,\n}) => {\n  const {\n    onConfirm,\n    resetConfirmation,\n    isActive,\n    proceed,\n    cancel,\n  } = useConfirm(when);\n  const { resolve } = useContext(ConfirmContext) || {};\n\n  const blocker = useCallback(\n    async (tx: Transition) => {\n      const result = await onConfirm(tx);\n      if (result) {\n        resetConfirmation();\n        tx.retry();\n      }\n    },\n    [resetConfirmation, onConfirm]\n  );\n\n  // TODO: Check fif effect is required to reset resolution if \"when\" is changed.\n\n  useBlocker(blocker, when && !resolve);\n\n  return (\n    <div>\n      {children({\n        isActive,\n        onConfirm: proceed,\n        onCancel: cancel,\n      })}\n    </div>\n  );\n};\n\nconst Main: React.FC<ReactRouterPromptProps> = props => {\n  return (\n    <ConfirmContextProvider>\n      <ReactRouterPrompt {...props} />\n    </ConfirmContextProvider>\n  );\n};\n\nexport default Main;\n"],"names":["useBlocker","blocker","when","useContext","NavigationContext","navigator","useEffect","unblock","block","tx","autoUnblockingTx","retry","ConfirmContext","React","createContext","ConfirmContextProvider","children","useState","resolve","setResolve","Provider","value","noop","initialConfirmState","isActive","proceed","cancel","useConfirm","confirm","setConfirm","window","onbeforeunload","resetConfirmation","useCallback","onConfirm","promise","Promise","reject","prevState","location","action","shouldPrompt","then","ReactRouterPrompt","result","onCancel","Main","props"],"mappings":"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"}