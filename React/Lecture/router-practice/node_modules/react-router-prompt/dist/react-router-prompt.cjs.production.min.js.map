{"version":3,"file":"react-router-prompt.cjs.production.min.js","sources":["../src/ConfirmContext.tsx","../src/hooks/use-confirm.ts","../src/index.tsx","../src/hooks/use-blocker.ts"],"sourcesContent":["import React, { useState } from \"react\";\n\ninterface ContextProviderType {\n  resolve?: boolean;\n  setResolve?: (value: boolean) => void;\n}\n\nexport const ConfirmContext = React.createContext<ContextProviderType | null>(\n  null\n);\n\nconst ConfirmContextProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  const [resolve, setResolve] = useState(false);\n\n  return (\n    <ConfirmContext.Provider\n      value={{\n        resolve,\n        setResolve,\n      }}\n    >\n      {children}\n    </ConfirmContext.Provider>\n  );\n};\n\nexport default ConfirmContextProvider;\n","import { useState, useEffect, useCallback, useContext } from \"react\";\nimport { ConfirmContext } from \"../ConfirmContext\";\nimport { Transition } from \"history\";\nimport { ReactRouterPromptProps } from \"..\";\n\nconst noop = () => {\n  /*No Operation*/\n};\n\nconst initialConfirmState = {\n  isActive: false,\n  proceed: noop,\n  cancel: noop,\n};\n\ndeclare interface InitialStateType {\n  isActive: boolean;\n  proceed: (value: unknown) => void;\n  cancel: (value: unknown) => void;\n}\n\ndeclare interface ConfirmLeaveReturnType extends InitialStateType {\n  onConfirm: (tx: Transition) => Promise<boolean>;\n  resetConfirmation: () => void;\n}\n\nconst useConfirm = (\n  when: ReactRouterPromptProps[\"when\"]\n): ConfirmLeaveReturnType => {\n  const [confirm, setConfirm] = useState<InitialStateType>(initialConfirmState);\n  const { setResolve } = useContext(ConfirmContext) || {};\n\n  useEffect(() => {\n    if (confirm.isActive) {\n      window.onbeforeunload = (): boolean => {\n        return false;\n      };\n    }\n\n    return (): void => {\n      if (confirm.isActive) window.onbeforeunload = null;\n    };\n  }, [confirm]);\n\n  const resetConfirmation = useCallback(() => {\n    setConfirm(initialConfirmState);\n  }, []);\n\n  const onConfirm = useCallback(\n    async (tx: Transition): Promise<boolean> => {\n      const promise = new Promise(async (resolve, reject) => {\n        setConfirm((prevState: InitialStateType) => ({\n          ...prevState,\n          isActive: true,\n          proceed: resolve,\n          cancel: reject,\n        }));\n\n        // Go ahead and resolve the promise when the `when` function\n        // returns `false`, which means the prompt should not be displayed\n        // and navigation should occur.\n        if (typeof when === \"function\") {\n          const shouldPrompt = await when(tx.location, tx.action);\n          if (!shouldPrompt) {\n            resolve(true);\n          }\n        }\n      });\n\n      return promise.then(\n        () => {\n          setResolve?.(true);\n          setConfirm({ ...confirm, isActive: false });\n          return true;\n        },\n        () => {\n          setConfirm({ ...confirm, isActive: false });\n          setResolve?.(false);\n          return false;\n        }\n      );\n    },\n    [confirm, setResolve, when]\n  );\n\n  return {\n    ...confirm,\n    onConfirm,\n    resetConfirmation,\n  };\n};\n\nexport default useConfirm;\n","import React, { useCallback, useContext } from \"react\";\nimport { Action, Location, Transition } from \"history\";\n\nimport useBlocker from \"./hooks/use-blocker\";\nimport ConfirmContextProvider, { ConfirmContext } from \"./ConfirmContext\";\nimport useConfirm from \"./hooks/use-confirm\";\n\nexport type ReactRouterPromptProps = {\n  when: boolean | ((nextLocation: Location, _action: Action) => boolean);\n  children: (data: {\n    isActive: boolean;\n    onCancel: (value: unknown) => void;\n    onConfirm: (value: unknown) => void;\n  }) => React.ReactNode;\n};\n\n/**\n * A replacement component for the react-router `Prompt`.\n * Allows for more flexible dialogs.\n *\n * @example\n * <ReactRouterPrompt when={isDirty}>\n *   {({isActive, onConfirm, onCancel}) => (\n *     <Modal show={isActive}>\n *       <div>\n *         <p>Do you really want to leave?</p>\n *         <button onClick={onCancel}>Cancel</button>\n *         <button onClick={onConfirm}>Ok</button>\n *       </div>\n *     </Modal>\n *   )}\n * </ReactRouterPrompt>\n */\n\nconst ReactRouterPrompt: React.FC<ReactRouterPromptProps> = ({\n  when,\n  children,\n}) => {\n  const {\n    onConfirm,\n    resetConfirmation,\n    isActive,\n    proceed,\n    cancel,\n  } = useConfirm(when);\n  const { resolve } = useContext(ConfirmContext) || {};\n\n  const blocker = useCallback(\n    async (tx: Transition) => {\n      const result = await onConfirm(tx);\n      if (result) {\n        resetConfirmation();\n        tx.retry();\n      }\n    },\n    [resetConfirmation, onConfirm]\n  );\n\n  // TODO: Check fif effect is required to reset resolution if \"when\" is changed.\n\n  useBlocker(blocker, when && !resolve);\n\n  return (\n    <div>\n      {children({\n        isActive,\n        onConfirm: proceed,\n        onCancel: cancel,\n      })}\n    </div>\n  );\n};\n\nconst Main: React.FC<ReactRouterPromptProps> = props => {\n  return (\n    <ConfirmContextProvider>\n      <ReactRouterPrompt {...props} />\n    </ConfirmContextProvider>\n  );\n};\n\nexport default Main;\n","import { useContext, useEffect } from \"react\";\nimport { Blocker, Transition } from \"history\";\n// @ts-ignore\nimport { UNSAFE_NavigationContext as NavigationContext } from \"react-router-dom\";\n\nfunction useBlocker(blocker: Blocker, when = true) {\n  const { navigator } = useContext(NavigationContext);\n\n  useEffect(() => {\n    if (!when) return;\n\n    // @ts-ignore\n    const unblock = navigator.block((tx: Transition) => {\n      const autoUnblockingTx = {\n        ...tx,\n        retry() {\n          // Automatically unblock the transition so it can play all the way\n          // through before retrying it. TODO: Figure out how to re-enable\n          // this block if the transition is cancelled for some reason.\n          unblock();\n          tx.retry();\n        },\n      };\n\n      blocker(autoUnblockingTx);\n    });\n\n    return unblock;\n  }, [navigator, blocker, when]);\n}\n\nexport default useBlocker;\n"],"names":["ConfirmContext","React","createContext","ConfirmContextProvider","children","useState","Provider","value","resolve","setResolve","noop","initialConfirmState","isActive","proceed","cancel","ReactRouterPrompt","when","confirm","setConfirm","useContext","useEffect","window","onbeforeunload","resetConfirmation","useCallback","onConfirm","tx","promise","Promise","reject","prevState","_context","location","action","then","useConfirm","blocker","navigator","NavigationContext","unblock","block","autoUnblockingTx","retry","useBlocker","onCancel","props"],"mappings":"0gOAOO,IAAMA,EAAiBC,EAAMC,cAClC,MAGIC,EAAkE,gBACtEC,IAAAA,WAE8BC,YAAS,GAEvC,OACEJ,gBAACD,EAAeM,UACdC,MAAO,CACLC,aACAC,kBAGDL,IClBDM,EAAO,aAIPC,EAAsB,CAC1BC,UAAU,EACVC,QAASH,EACTI,OAAQJ,GCsBJK,EAAsD,gBAC1DC,IAAAA,KACAZ,IAAAA,WDViB,SACjBY,GAEA,MAA8BX,WAA2BM,GAAlDM,OAASC,OACRT,GAAeU,aAAWnB,IAAmB,IAA7CS,WAERW,aAAU,WAOR,OANIH,EAAQL,WACVS,OAAOC,eAAiB,WACtB,OAAO,IAIJ,WACDL,EAAQL,WAAUS,OAAOC,eAAiB,SAE/C,CAACL,IAEJ,IAAMM,EAAoBC,eAAY,WACpCN,EAAWP,KACV,IAEGc,EAAYD,yBAAW,kBAC3B,WAAOE,GAAP,MAAA,6BAAA,OAAA,sBAAA,OAAA,OACQC,EAAU,IAAIC,mBAAJ,kBAAY,WAAOpB,EAASqB,GAAhB,6BAAA,OAAA,sBAAA,OAAA,GAC1BX,GAAW,SAACY,GAAD,YACNA,GACHlB,UAAU,EACVC,QAASL,EACTM,OAAQe,OAMU,mBAATb,GAXee,SAAA,MAAA,OAAAA,SAYGf,EAAKU,EAAGM,SAAUN,EAAGO,QAZxB,eActBzB,GAAQ,GAdc,OAAA,UAAA,0BAAZ,qBAAA,sDAmBTmB,EAAQO,MACb,WAGE,aAFAzB,GAAAA,GAAa,GACbS,OAAgBD,GAASL,UAAU,MAC5B,KAET,WAGE,OAFAM,OAAgBD,GAASL,UAAU,WACnCH,GAAAA,GAAa,IACN,MA7Bb,OAAA,UAAA,0BAD2B,mBAAA,mCAkC3B,CAACQ,EAASR,EAAYO,IAGxB,YACKC,GACHQ,UAAAA,EACAF,kBAAAA,IC5CEY,CAAWnB,GALbS,IAAAA,UACAF,IAAAA,kBACAX,IAAAA,SACAC,IAAAA,QACAC,IAAAA,OAEMN,GAAYW,aAAWnB,IAAmB,IAA1CQ,QAiBR,OCzDF,SAAoB4B,EAAkBpB,YAAAA,IAAAA,GAAO,GAC3C,IAAQqB,EAAclB,aAAWmB,4BAAzBD,UAERjB,aAAU,WACR,GAAKJ,EAAL,CAGA,IAAMuB,EAAUF,EAAUG,OAAM,SAACd,GAC/B,IAAMe,OACDf,GACHgB,iBAIEH,IACAb,EAAGgB,WAIPN,EAAQK,MAGV,OAAOF,KACN,CAACF,EAAWD,EAASpB,IDgCxB2B,CAbgBnB,yBAAW,kBACzB,WAAOE,GAAP,6BAAA,OAAA,sBAAA,OAAA,OAAAK,SACuBN,EAAUC,GADjC,gBAGIH,IACAG,EAAGgB,SAJP,OAAA,UAAA,0BADyB,mBAAA,mCAQzB,CAACnB,EAAmBE,IAKFT,IAASR,GAG3BP,2BACGG,EAAS,CACRQ,SAAAA,EACAa,UAAWZ,EACX+B,SAAU9B,sBAM6B,SAAA+B,GAC7C,OACE5C,gBAACE,OACCF,gBAACc,mBAAsB8B"}