{"ast":null,"code":"const FIREBASE_DOMAIN = 'https://react-http-7ba38-default-rtdb.firebaseio.com';\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n  const transformedQuotes = [];\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key]\n    };\n    transformedQuotes.push(quoteObj);\n  }\n  return transformedQuotes;\n}\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n  const loadedQuote = {\n    id: quoteId,\n    ...data\n  };\n  return loadedQuote;\n}\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n  return null;\n}\nexport async function addComment(requestData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n  return {\n    commentId: data.name\n  };\n}\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n  const transformedComments = [];\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key]\n    };\n    transformedComments.push(commentObj);\n  }\n  return transformedComments;\n}","map":{"version":3,"names":["FIREBASE_DOMAIN","getAllQuotes","response","fetch","data","json","ok","Error","message","transformedQuotes","key","quoteObj","id","push","getSingleQuote","quoteId","loadedQuote","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","requestData","commentData","commentId","name","getAllComments","transformedComments","commentObj"],"sources":["/Users/gimseungheon/Documents/front_project/React/Lecture/router-practice/src/lib/api.js"],"sourcesContent":["const FIREBASE_DOMAIN = 'https://react-http-7ba38-default-rtdb.firebaseio.com';\n\nexport async function getAllQuotes() {\n    const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n    const data = await response.json();\n\n    if (!response.ok) {\n        throw new Error(data.message || 'Could not fetch quotes.');\n    }\n\n    const transformedQuotes = [];\n\n    for (const key in data) {\n        const quoteObj = {\n            id: key,\n            ...data[key],\n        };\n\n        transformedQuotes.push(quoteObj);\n    }\n\n    return transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n    const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n    const data = await response.json();\n\n    if (!response.ok) {\n        throw new Error(data.message || 'Could not fetch quote.');\n    }\n\n    const loadedQuote = {\n        id: quoteId,\n        ...data,\n    };\n\n    return loadedQuote;\n}\n\nexport async function addQuote(quoteData) {\n    const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n        method: 'POST',\n        body: JSON.stringify(quoteData),\n        headers: {\n            'Content-Type': 'application/json',\n        },\n    });\n    const data = await response.json();\n\n    if (!response.ok) {\n        throw new Error(data.message || 'Could not create quote.');\n    }\n\n    return null;\n}\n\nexport async function addComment(requestData) {\n    const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`, {\n        method: 'POST',\n        body: JSON.stringify(requestData.commentData),\n        headers: {\n            'Content-Type': 'application/json',\n        },\n    });\n    const data = await response.json();\n\n    if (!response.ok) {\n        throw new Error(data.message || 'Could not add comment.');\n    }\n\n    return {commentId: data.name};\n}\n\nexport async function getAllComments(quoteId) {\n    const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n    const data = await response.json();\n\n    if (!response.ok) {\n        throw new Error(data.message || 'Could not get comments.');\n    }\n\n    const transformedComments = [];\n\n    for (const key in data) {\n        const commentObj = {\n            id: key,\n            ...data[key],\n        };\n\n        transformedComments.push(commentObj);\n    }\n\n    return transformedComments;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}