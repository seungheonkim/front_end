{"ast":null,"code":"var _jsxFileName = \"/Users/gimseungheon/Documents/front_project/React/Lecture/router-practice/src/components/quotes/QuoteList.js\",\n  _s = $RefreshSig$();\nimport { Fragment } from 'react';\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\nconst QuoteList = props => {\n  _s();\n  const navigate = useNavigate();\n  const location = useLocation();\n  console.log(location);\n\n  //'?sort=asc'\n  const queryParams = new URLSearchParams(location.search);\n  const isSortingAscending = queryParams.get('sort') === 'asc'; //asc true\n\n  const sortedQuotes = sortQuotes(props.quotes, isSortingAscending);\n  const changeSortingHandler = () => {\n    navigate(`?sort=${isSortingAscending ? 'desc' : 'asc'}`);\n  };\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.sorting,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: changeSortingHandler,\n        children: [\"Sort \", isSortingAscending ? 'Descending' : 'Ascending']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: classes.list,\n      children: sortedQuotes.map(quote => /*#__PURE__*/_jsxDEV(QuoteItem, {\n        id: quote.id,\n        author: quote.author,\n        text: quote.text\n      }, quote.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n_s(QuoteList, \"VDZHUspDq9N5O9RWjniBrjgIdAA=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = QuoteList;\nexport default QuoteList;\nvar _c;\n$RefreshReg$(_c, \"QuoteList\");","map":{"version":3,"names":["Fragment","QuoteItem","classes","useLocation","useNavigate","sortQuotes","quotes","ascending","sort","quoteA","quoteB","id","QuoteList","props","navigate","location","console","log","queryParams","URLSearchParams","search","isSortingAscending","get","sortedQuotes","changeSortingHandler","sorting","list","map","quote","author","text"],"sources":["/Users/gimseungheon/Documents/front_project/React/Lecture/router-practice/src/components/quotes/QuoteList.js"],"sourcesContent":["import {Fragment} from 'react';\n\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\nimport {useLocation, useNavigate} from \"react-router-dom\";\n\nconst sortQuotes = (quotes, ascending) => {\n    return quotes.sort((quoteA, quoteB) => {\n        if (ascending) {\n            return quoteA.id > quoteB.id ? 1 : -1;\n        } else {\n            return quoteA.id < quoteB.id ? 1 : -1;\n        }\n    });\n};\n\nconst QuoteList = (props) => {\n    const navigate = useNavigate();\n    const location = useLocation();\n\n    console.log(location);\n\n    //'?sort=asc'\n    const queryParams = new URLSearchParams(location.search);\n\n    const isSortingAscending = queryParams.get('sort') === 'asc';//asc true\n\n    const sortedQuotes = sortQuotes(props.quotes, isSortingAscending);\n\n    const changeSortingHandler = () => {\n        navigate(`?sort=${(isSortingAscending ? 'desc' : 'asc')}`);\n    }\n\n    return (\n        <Fragment>\n            <div className={classes.sorting}>\n                <button onClick={changeSortingHandler}>Sort {isSortingAscending ? 'Descending' : 'Ascending'}</button>\n            </div>\n            <ul className={classes.list}>\n                {sortedQuotes.map((quote) => (\n                    <QuoteItem\n                        key={quote.id}\n                        id={quote.id}\n                        author={quote.author}\n                        text={quote.text}\n                    />\n                ))}\n            </ul>\n        </Fragment>\n    );\n};\n\nexport default QuoteList;\n"],"mappings":";;AAAA,SAAQA,QAAQ,QAAO,OAAO;AAE9B,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,OAAO,MAAM,wBAAwB;AAC5C,SAAQC,WAAW,EAAEC,WAAW,QAAO,kBAAkB;AAAC;AAE1D,MAAMC,UAAU,GAAG,CAACC,MAAM,EAAEC,SAAS,KAAK;EACtC,OAAOD,MAAM,CAACE,IAAI,CAAC,CAACC,MAAM,EAAEC,MAAM,KAAK;IACnC,IAAIH,SAAS,EAAE;MACX,OAAOE,MAAM,CAACE,EAAE,GAAGD,MAAM,CAACC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;IACzC,CAAC,MAAM;MACH,OAAOF,MAAM,CAACE,EAAE,GAAGD,MAAM,CAACC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;IACzC;EACJ,CAAC,CAAC;AACN,CAAC;AAED,MAAMC,SAAS,GAAIC,KAAK,IAAK;EAAA;EACzB,MAAMC,QAAQ,GAAGV,WAAW,EAAE;EAC9B,MAAMW,QAAQ,GAAGZ,WAAW,EAAE;EAE9Ba,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;;EAErB;EACA,MAAMG,WAAW,GAAG,IAAIC,eAAe,CAACJ,QAAQ,CAACK,MAAM,CAAC;EAExD,MAAMC,kBAAkB,GAAGH,WAAW,CAACI,GAAG,CAAC,MAAM,CAAC,KAAK,KAAK,CAAC;;EAE7D,MAAMC,YAAY,GAAGlB,UAAU,CAACQ,KAAK,CAACP,MAAM,EAAEe,kBAAkB,CAAC;EAEjE,MAAMG,oBAAoB,GAAG,MAAM;IAC/BV,QAAQ,CAAE,SAASO,kBAAkB,GAAG,MAAM,GAAG,KAAO,EAAC,CAAC;EAC9D,CAAC;EAED,oBACI,QAAC,QAAQ;IAAA,wBACL;MAAK,SAAS,EAAEnB,OAAO,CAACuB,OAAQ;MAAA,uBAC5B;QAAQ,OAAO,EAAED,oBAAqB;QAAA,oBAAOH,kBAAkB,GAAG,YAAY,GAAG,WAAW;MAAA;QAAA;QAAA;QAAA;MAAA;IAAU;MAAA;MAAA;MAAA;IAAA,QACpG,eACN;MAAI,SAAS,EAAEnB,OAAO,CAACwB,IAAK;MAAA,UACvBH,YAAY,CAACI,GAAG,CAAEC,KAAK,iBACpB,QAAC,SAAS;QAEN,EAAE,EAAEA,KAAK,CAACjB,EAAG;QACb,MAAM,EAAEiB,KAAK,CAACC,MAAO;QACrB,IAAI,EAAED,KAAK,CAACE;MAAK,GAHZF,KAAK,CAACjB,EAAE;QAAA;QAAA;QAAA;MAAA,QAKpB;IAAC;MAAA;MAAA;MAAA;IAAA,QACD;EAAA;IAAA;IAAA;IAAA;EAAA,QACE;AAEnB,CAAC;AAAC,GAlCIC,SAAS;EAAA,QACMR,WAAW,EACXD,WAAW;AAAA;AAAA,KAF1BS,SAAS;AAoCf,eAAeA,SAAS;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}