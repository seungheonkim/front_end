{"ast":null,"code":"var _jsxFileName = \"/Users/gimseungheon/Documents/front_project/React/Lecture/01-starting-project/src/components/Login/Login.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = props => {\n  _s();\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [emailIsValid, setEmailIsValid] = useState();\n  const [enteredPassword, setEnteredPassword] = useState('');\n  const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n  useEffect(() => {\n    //runs \"after!!\" every component render cycle\n    //모든 컴포넌트가 다시 랜더링 되고 난 후에 실행되는 코드\n    console.log('effect running');\n\n    //dependency\n    // [] => 가장 첫 랜더링이 완료될때 , 그 이후로는 실행 안됨\n    //[dep] => [] 안에 들어가있는 dep의 상태가 변경될때마다 실행됨\n\n    //effect cleanup function\n    return () => {\n      //모든 컴포넌트의 첫 렌더링 경우를 제외하고\n      //effect 가 실행되기 전에 실행\n\n      //dep = [] 빈 배열일 경우\n      //해당 이펙트가 발생하는 컴포넌트가 완료될 경우에 클린업이 발생함\n      console.log('effect cleanup!!');\n    };\n  }, [enteredPassword]);\n  useEffect(() => {\n    const identifier = setTimeout(() => {\n      //only read once => check validity\n      console.log('checking form validity!');\n      setFormIsValid(enteredEmail.includes('@') && enteredPassword.trim().length > 6);\n    }, 500);\n    return () => {\n      //cleanup process\n      console.log('clean up');\n      clearTimeout(identifier);\n    };\n  }, [enteredEmail, enteredPassword]);\n  const emailChangeHandler = event => {\n    setEnteredEmail(event.target.value);\n  };\n  const passwordChangeHandler = event => {\n    setEnteredPassword(event.target.value);\n  };\n  const validateEmailHandler = () => {\n    setEmailIsValid(enteredEmail.includes('@'));\n  };\n  const validatePasswordHandler = () => {\n    setPasswordIsValid(enteredPassword.trim().length > 6);\n  };\n  const submitHandler = event => {\n    event.preventDefault();\n    props.onLogin(enteredEmail, enteredPassword);\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${emailIsValid === false ? classes.invalid : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"E-Mail\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          value: enteredEmail,\n          onChange: emailChangeHandler,\n          onBlur: validateEmailHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${passwordIsValid === false ? classes.invalid : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          value: enteredPassword,\n          onChange: passwordChangeHandler,\n          onBlur: validatePasswordHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          disabled: !formIsValid,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n_s(Login, \"ecStYhlpxR1ONwx5Ge3gDXUTP0k=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useEffect","useState","Card","classes","Button","Login","props","enteredEmail","setEnteredEmail","emailIsValid","setEmailIsValid","enteredPassword","setEnteredPassword","passwordIsValid","setPasswordIsValid","formIsValid","setFormIsValid","console","log","identifier","setTimeout","includes","trim","length","clearTimeout","emailChangeHandler","event","target","value","passwordChangeHandler","validateEmailHandler","validatePasswordHandler","submitHandler","preventDefault","onLogin","login","control","invalid","actions","btn"],"sources":["/Users/gimseungheon/Documents/front_project/React/Lecture/01-starting-project/src/components/Login/Login.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\n\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\n\nconst Login = (props) => {\n    const [enteredEmail, setEnteredEmail] = useState('');\n    const [emailIsValid, setEmailIsValid] = useState();\n    const [enteredPassword, setEnteredPassword] = useState('');\n    const [passwordIsValid, setPasswordIsValid] = useState();\n    const [formIsValid, setFormIsValid] = useState(false);\n\n    useEffect(() => {\n        //runs \"after!!\" every component render cycle\n        //모든 컴포넌트가 다시 랜더링 되고 난 후에 실행되는 코드\n        console.log('effect running');\n\n        //dependency\n        // [] => 가장 첫 랜더링이 완료될때 , 그 이후로는 실행 안됨\n        //[dep] => [] 안에 들어가있는 dep의 상태가 변경될때마다 실행됨\n\n        //effect cleanup function\n        return () => {\n            //모든 컴포넌트의 첫 렌더링 경우를 제외하고\n            //effect 가 실행되기 전에 실행\n\n            //dep = [] 빈 배열일 경우\n            //해당 이펙트가 발생하는 컴포넌트가 완료될 경우에 클린업이 발생함\n            console.log('effect cleanup!!');\n        }\n    },[enteredPassword])\n\n    useEffect(() => {\n        const identifier = setTimeout(() => {\n            //only read once => check validity\n            console.log('checking form validity!');\n            setFormIsValid(\n                enteredEmail.includes('@') && enteredPassword.trim().length > 6\n            );\n        }, 500);\n\n        return () => {\n            //cleanup process\n            console.log('clean up');\n            clearTimeout(identifier);\n        };\n    }, [enteredEmail, enteredPassword]);\n\n    const emailChangeHandler = (event) => {\n        setEnteredEmail(event.target.value);\n    };\n\n    const passwordChangeHandler = (event) => {\n        setEnteredPassword(event.target.value);\n    };\n\n    const validateEmailHandler = () => {\n        setEmailIsValid(enteredEmail.includes('@'));\n    };\n\n    const validatePasswordHandler = () => {\n        setPasswordIsValid(enteredPassword.trim().length > 6);\n    };\n\n    const submitHandler = (event) => {\n        event.preventDefault();\n        props.onLogin(enteredEmail, enteredPassword);\n    };\n\n    return (\n        <Card className={classes.login}>\n            <form onSubmit={submitHandler}>\n                <div\n                    className={`${classes.control} ${\n                        emailIsValid === false ? classes.invalid : ''\n                    }`}\n                >\n                    <label htmlFor=\"email\">E-Mail</label>\n                    <input\n                        type=\"email\"\n                        id=\"email\"\n                        value={enteredEmail}\n                        onChange={emailChangeHandler}\n                        onBlur={validateEmailHandler}\n                    />\n                </div>\n                <div\n                    className={`${classes.control} ${\n                        passwordIsValid === false ? classes.invalid : ''\n                    }`}\n                >\n                    <label htmlFor=\"password\">Password</label>\n                    <input\n                        type=\"password\"\n                        id=\"password\"\n                        value={enteredPassword}\n                        onChange={passwordChangeHandler}\n                        onBlur={validatePasswordHandler}\n                    />\n                </div>\n                <div className={classes.actions}>\n                    <Button type=\"submit\" className={classes.btn} disabled={!formIsValid}>\n                        Login\n                    </Button>\n                </div>\n            </form>\n        </Card>\n    );\n};\n\nexport default Login;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAEhD,OAAOC,IAAI,MAAM,iBAAiB;AAClC,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,MAAM,MAAM,qBAAqB;AAAC;AAEzC,MAAMC,KAAK,GAAIC,KAAK,IAAK;EAAA;EACrB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,EAAE;EAClD,MAAM,CAACU,eAAe,EAAEC,kBAAkB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACY,eAAe,EAAEC,kBAAkB,CAAC,GAAGb,QAAQ,EAAE;EACxD,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAErDD,SAAS,CAAC,MAAM;IACZ;IACA;IACAiB,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;;IAE7B;IACA;IACA;;IAEA;IACA,OAAO,MAAM;MACT;MACA;;MAEA;MACA;MACAD,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;IACnC,CAAC;EACL,CAAC,EAAC,CAACP,eAAe,CAAC,CAAC;EAEpBX,SAAS,CAAC,MAAM;IACZ,MAAMmB,UAAU,GAAGC,UAAU,CAAC,MAAM;MAChC;MACAH,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;MACtCF,cAAc,CACVT,YAAY,CAACc,QAAQ,CAAC,GAAG,CAAC,IAAIV,eAAe,CAACW,IAAI,EAAE,CAACC,MAAM,GAAG,CAAC,CAClE;IACL,CAAC,EAAE,GAAG,CAAC;IAEP,OAAO,MAAM;MACT;MACAN,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;MACvBM,YAAY,CAACL,UAAU,CAAC;IAC5B,CAAC;EACL,CAAC,EAAE,CAACZ,YAAY,EAAEI,eAAe,CAAC,CAAC;EAEnC,MAAMc,kBAAkB,GAAIC,KAAK,IAAK;IAClClB,eAAe,CAACkB,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACvC,CAAC;EAED,MAAMC,qBAAqB,GAAIH,KAAK,IAAK;IACrCd,kBAAkB,CAACc,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EAC1C,CAAC;EAED,MAAME,oBAAoB,GAAG,MAAM;IAC/BpB,eAAe,CAACH,YAAY,CAACc,QAAQ,CAAC,GAAG,CAAC,CAAC;EAC/C,CAAC;EAED,MAAMU,uBAAuB,GAAG,MAAM;IAClCjB,kBAAkB,CAACH,eAAe,CAACW,IAAI,EAAE,CAACC,MAAM,GAAG,CAAC,CAAC;EACzD,CAAC;EAED,MAAMS,aAAa,GAAIN,KAAK,IAAK;IAC7BA,KAAK,CAACO,cAAc,EAAE;IACtB3B,KAAK,CAAC4B,OAAO,CAAC3B,YAAY,EAAEI,eAAe,CAAC;EAChD,CAAC;EAED,oBACI,QAAC,IAAI;IAAC,SAAS,EAAER,OAAO,CAACgC,KAAM;IAAA,uBAC3B;MAAM,QAAQ,EAAEH,aAAc;MAAA,wBAC1B;QACI,SAAS,EAAG,GAAE7B,OAAO,CAACiC,OAAQ,IAC1B3B,YAAY,KAAK,KAAK,GAAGN,OAAO,CAACkC,OAAO,GAAG,EAC9C,EAAE;QAAA,wBAEH;UAAO,OAAO,EAAC,OAAO;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAe,eACrC;UACI,IAAI,EAAC,OAAO;UACZ,EAAE,EAAC,OAAO;UACV,KAAK,EAAE9B,YAAa;UACpB,QAAQ,EAAEkB,kBAAmB;UAC7B,MAAM,EAAEK;QAAqB;UAAA;UAAA;UAAA;QAAA,QAC/B;MAAA;QAAA;QAAA;QAAA;MAAA,QACA,eACN;QACI,SAAS,EAAG,GAAE3B,OAAO,CAACiC,OAAQ,IAC1BvB,eAAe,KAAK,KAAK,GAAGV,OAAO,CAACkC,OAAO,GAAG,EACjD,EAAE;QAAA,wBAEH;UAAO,OAAO,EAAC,UAAU;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAiB,eAC1C;UACI,IAAI,EAAC,UAAU;UACf,EAAE,EAAC,UAAU;UACb,KAAK,EAAE1B,eAAgB;UACvB,QAAQ,EAAEkB,qBAAsB;UAChC,MAAM,EAAEE;QAAwB;UAAA;UAAA;UAAA;QAAA,QAClC;MAAA;QAAA;QAAA;QAAA;MAAA,QACA,eACN;QAAK,SAAS,EAAE5B,OAAO,CAACmC,OAAQ;QAAA,uBAC5B,QAAC,MAAM;UAAC,IAAI,EAAC,QAAQ;UAAC,SAAS,EAAEnC,OAAO,CAACoC,GAAI;UAAC,QAAQ,EAAE,CAACxB,WAAY;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAE5D;QAAA;QAAA;QAAA;MAAA,QACP;IAAA;MAAA;MAAA;MAAA;IAAA;EACH;IAAA;IAAA;IAAA;EAAA,QACJ;AAEf,CAAC;AAAC,GAvGIV,KAAK;AAAA,KAALA,KAAK;AAyGX,eAAeA,KAAK;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}