// 문제
// 마트에서 장을 보고 박스를 포장하려고 합니다. 박스를 포장하는 데는 폭이 너무 좁습니다. 그렇기에 한 줄로 서 있어야 하고, 들어온 순서대로 한 명씩 나가야 합니다.
//
//     불행 중 다행은, 인원에 맞게 포장할 수 있는 기구들이 놓여 있어, 모두가 포장을 할 수 있다는 것입니다. 짐이 많은 사람은 짐이 적은 사람보다 포장하는 시간이 길 수밖에 없습니다.
//
//     뒷사람이 포장을 전부 끝냈어도 앞사람이 끝내지 못하면 기다려야 합니다. 앞사람이 포장을 끝내면, 포장을 마친 뒷사람들과 함께 한 번에 나가게 됩니다.
//
//     만약, 앞사람의 박스는 5 개고, 뒷사람 1의 박스는 4 개, 뒷사람 2의 박스는 8 개라고 가정했을 때, 뒷사람 1이 제일 먼저 박스 포장을 끝내게 되어도 앞사람 1의 포장이 마칠 때까지 기다렸다가 같이 나가게 됩니다.
//
//     이때, 통틀어 최대 몇 명이 한꺼번에 나가는지 알 수 있도록 함수를 구현해 주세요.

const paveBox = (boxes) => {
    //boxes 배열의 가장 앞의 원소 now 변수에 할당
    let now = boxes[0];

    let count = 1, max = 1;

    //boxes 배열의 원소를 순회
    for (let i = 1; i < boxes.length; i++) {
        //해당 원소가 현재 가장 앞에 위치한 원소보다 작거나 같다면
        if (boxes[i] <= now) {
            //같이 나갈 수 있기 때문에 count +1 해주기
            count++;
        } else {
            //해당 원소가 가장 앞 원소인 now 보다 크다면
            //해당 원소는 now 랑 같이 못나가게됨
            //now 와 같이 나갈 수 있는 사람은 해당 원소 전 사람까지만!
            //따라서 count 1 로 초기화
            //now 를 해당 원소로 교체 할당
            count = 1;
            now = boxes[i];
        }
        //count 수가 max 보다 커지면 max 값 갱신하기
        if (max < count) {
            max = count;
        }
    }
    return max;
}

const boxes = [5, 1, 4, 6];
const output = paveBox(boxes);
console.log(output); // 3